# -*- coding: utf-8 -*-
"""major working.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1DO32g1cpyNPkDffBSXm35EmsetK_o1
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import requests
import io
import os
import shutil

#Create the data for the positive samples
FILE_PATH="/content/drive/MyDrive/Covid Detections/covid-chestxray-dataset-master/metadata.csv"
IMAGES_PATH="/content/drive/MyDrive/Covid Detections/covid-chestxray-dataset-master/images"

df=pd.read_csv(FILE_PATH)
print(df.shape)

df.head()

TARGET_DIR="/content/drive/MyDrive/Covid Detections/Dataset/Covid"

cnt=0
for(i,row) in df.iterrows() :
    if row["finding"]=="Pneumonia/Viral/COVID-19" and row["view"]=="PA":
        filename=row["filename"]
        image_path=os.path.join(IMAGES_PATH,filename)
        image_copy_path=os.path.join(TARGET_DIR,filename)
        shutil.copy2(image_path,image_copy_path)
        print("Moving image",cnt)
        cnt+= 1
print(cnt)

#Sampling of Images from Kaggle Dataset
import random
KAGGLE_FILE_PATH="/content/drive/MyDrive/Covid Detections/chest_xray/train/NORMAL"
TARGET_NORMAL_DIR="/content/drive/MyDrive/Covid Detections/Dataset/Normal"

image_names=os.listdir(KAGGLE_FILE_PATH)

image_names

random.shuffle(image_names)

for i in range(142):
  image_name=image_names[i]
  image_path=os.path.join(KAGGLE_FILE_PATH,image_name)
  target_path=os.path.join(TARGET_NORMAL_DIR,image_name)
  shutil.copy2(image_path,target_path)
  print("Copying image",i)

TRAIN_PATH = "/content/drive/MyDrive/Covid Detections/Dataset"
VAL_PATH = "/content/drive/MyDrive/Covid Detections/Final Dataset/Val"

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.layers import *
from keras.models import * 
from keras.preprocessing import image

# CNN Based Model in Keras

model = Sequential()
model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(224,224,3)))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss=keras.losses.binary_crossentropy,optimizer='adam',metrics=['accuracy'])

model.summary()

# Train from scratch
train_datagen = image.ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
)

test_dataset = image.ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Covid Detections/Dataset',
    target_size = (224,224),
    batch_size = 32,
    class_mode = 'binary')

train_generator.class_indices

validation_generator = test_dataset.flow_from_directory(
    '/content/drive/MyDrive/Covid Detections/Final Dataset/Val',
    target_size = (224,224),
    batch_size = 32,
    class_mode = 'binary')

hist = model.fit_generator(
    train_generator,
    steps_per_epoch=8,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps=2
)

model.save("model_adv.h5")

model.evaluate_generator(train_generator)

model.evaluate_generator(validation_generator)







model=load_model("model_adv.h5")

y_actual=[]
y_test=[]

for i in os.listdir("/content/drive/MyDrive/Covid Detections/Final Dataset/Val/Normal/"):
  img=image.load_img("/content/drive/MyDrive/Covid Detections/Final Dataset/Val/Normal/"+i,target_size=(224,224))
  img=image.img_to_array(img)
  img=np.expand_dims(img,axis=0)
  p=model.predict_classes(img)
  y_test.append(p[0,0])
  y_actual.append(1)

for i in os.listdir("/content/drive/MyDrive/Covid Detections/Final Dataset/Val/Covid/"):
  img=image.load_img("/content/drive/MyDrive/Covid Detections/Final Dataset/Val/Covid/"+i,target_size=(224,224))
  img=image.img_to_array(img)
  img=np.expand_dims(img,axis=0)
  p=model.predict_classes(img)
  y_test.append(p[0,0])
  y_actual.append(1)

y_actual=np.array(y_actual)
y_test=np.array(y_test)

from sklearn.metrics import confusion_matrix

cm=confusion_matrix(y_actual,y_test)

import seaborn as sns

sns.heatmap(cm,cmap="plasma",annot=True)

"""# New Section"""